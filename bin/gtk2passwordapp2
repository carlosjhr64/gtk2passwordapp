#!/usr/bin/env ruby
require 'rubygems'

if (nogui = ARGV.include?('--no-gui')) || (ARGV.include?('--dump')) then
  require 'gtk2passwordapp/passwords'
  # Unfortunately, gtk2applib makes this awkard.
  # Have to assume things...
  pwfile = File.expand_path('~/.gtk2passwordapp-2/passwords.dat')
  raise "Need #{pwfile}" unless File.exist?(pwfile)
  # Note: user may want to send stdout to a file,
  # so commicating with user via stderr.
  $stderr.print  "Warning: password will be shown.\nPassword: "
  pwd = $stdin.gets.strip
  if pwd.length == 3 then
    begin
      otpr = `which otpr`
      if otpr.length > 0 then
        bucket = ''
        while bucket == '' do
          $stderr.print "Bucket: "
          bucket = $stdin.gets.strip
          $stderr.puts "Need Google Cloud Storage's bucket name. (Ctrl-C to break)" if bucket.length == 0
        end
        $stderr.print "Pad Name('gtk2passwordapp'): "
        padname = $stdin.gets.strip
        padname = 'gtk2passwordapp' if padname.length == 0
        $stderr.puts "otpr -u #{bucket} #{padname}"
        IO.popen( "otpr -u #{bucket} #{padname}", 'w+' ) do |pipe|
          if pipe.gets then		# asks for pin
            pipe.puts pwd		# give pin
            pwd = pipe.gets.strip	# get password
          end
        end
      end
    rescue Exception
      # user probably wanted out of the loop
      $stderr.puts
    end
    # Sending master password to standard out.
    # The assumption here is that the user is doing a recovery...
    # Why else would the user be using this --no-gui?
    $stdout.puts pwd
  end
  if nogui then
    $stderr.print "Warning: selected passwords will be shown.\nEnter Account pattern: "
    pattern = Regexp.new( $stdin.gets.strip, Regexp::IGNORECASE )
  end
  begin
    passwords = Gtk2Password::Passwords.new(pwfile, pwd)
    passwords.load
    if $options=~/-dump/ then
      require 'pp'
      # puts to stdout
      pp passwords
    else
      passwords.accounts.each do |account|
        if account =~ pattern then
          password = passwords.password_of(account)
          username = passwords.username_of(account)
          # puts to stdout
          $stdout.puts [account,username,password].join("\n\t")
        end
      end
    end
  rescue Exception
    $stderr.puts $!
  end
  exit
end

gem 'gtk2applib', '~> 15.3'
$help = <<EOT
\t--no-gui\tcommand line access to passwords
\t--dump\t\tpp dump of data
EOT
require 'gtk2applib'
require 'gtk2passwordapp'

program = Gtk2AppLib::Program.new( Gtk2Password::ABOUT )

begin
  Gtk2Password::App.new(program)
rescue Exception
  $!.puts_bang!
ensure
  program.finalize
end

